# -*- coding: utf-8 -*-
"""Домашнє завдання 3 до практичного 4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TuehME4HrUWcam_snTGCQ0qrTxIYaqep

# Створення бази даних
"""

import sqlite3

# Підключення до бази даних (створюється файл "database.db")
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# Створення таблиць
cursor.execute('''
CREATE TABLE Administrator (
    id INTEGER PRIMARY KEY,
    name TEXT
);
''')

cursor.execute('''
CREATE TABLE Lecturer (
    id INTEGER PRIMARY KEY,
    name TEXT,
    education TEXT
);
''')

cursor.execute('''
CREATE TABLE Student (
    id INTEGER PRIMARY KEY,
    name TEXT,
    study_year INTEGER,
    university TEXT
);
''')

cursor.execute('''
CREATE TABLE Speciality (
    id INTEGER PRIMARY KEY,
    name TEXT
);
''')

cursor.execute('''
CREATE TABLE Registration (
    id INTEGER PRIMARY KEY,
    student_id INTEGER,
    administrator_id INTEGER,
    price REAL,
    registration_date DATE,
    FOREIGN KEY (student_id) REFERENCES Student (id),
    FOREIGN KEY (administrator_id) REFERENCES Administrator (id)
);
''')

cursor.execute('''
CREATE TABLE Schedule (
    id INTEGER PRIMARY KEY
);
''')

cursor.execute('''
CREATE TABLE Course (
    id INTEGER PRIMARY KEY,
    hours_number INTEGER,
    certificate TEXT,
    start_date DATE,
    end_date DATE,
    price REAL,
    course_description TEXT
);
''')

cursor.execute('''
CREATE TABLE Course_materials (
    id INTEGER PRIMARY KEY,
    course_id INTEGER,
    lectures JSON,
    practical_tasks JSON,
    additional_resources JSON,
    FOREIGN KEY (course_id) REFERENCES Course (id)
);
''')

# Збереження змін і закриття з'єднання
conn.commit()
conn.close()

print("База даних створена")

"""# Наповнення БД даними"""

import sqlite3

# Підключення до бази даних
conn = sqlite3.connect('database.db')
cursor = conn.cursor()

# Додавання записів
# 1. Додавання адміністратора
cursor.execute('''
INSERT INTO Administrator (id, name)
VALUES (?, ?)
''', (1, 'Alice Johnson'))

# 2. Додавання студентів
cursor.execute('''
INSERT INTO Student (id, name, study_year, university)
VALUES (?, ?, ?, ?)
''', (1, 'John Doe', 2, 'Oxford University'))

cursor.execute('''
INSERT INTO Student (id, name, study_year, university)
VALUES (?, ?, ?, ?)
''', (2, 'Ivan Petrenko', 2, 'Taras Shevchenko University'))

# 3. Додавання курсів
cursor.execute('''
INSERT INTO Course (id, hours_number, certificate, start_date, end_date, price, course_description)
VALUES (?, ?, ?, ?, ?, ?, ?)
''', (1, 120, 'Yes', '2024-01-15', '2024-06-15', 500.0, 'Introduction to Python Programming'))

cursor.execute('''
INSERT INTO Course (id, hours_number, certificate, start_date, end_date, price, course_description)
VALUES (?, ?, ?, ?, ?, ?, ?)
''', (2, 90, 'No', '2024-02-01', '2024-05-01', 300.0, 'Basics of Data Analysis'))


# Додавання лекторів
cursor.execute('''
INSERT INTO Lecturer (id, name, education)
VALUES (?, ?, ?)
''', (1, 'Dr. Anna Smith', 'PhD in Computer Science'))

cursor.execute('''
INSERT INTO Lecturer (id, name, education)
VALUES (?, ?, ?)
''', (2, 'Dr. John Smith', 'PhD in Data Science'))

# Додавання спеціальностей
cursor.execute('''
INSERT INTO Speciality (id, name)
VALUES (?, ?)
''', (1, 'Applied Linguistics'))

cursor.execute('''
INSERT INTO Speciality (id, name)
VALUES (?, ?)
''', (2, 'Data Analysis'))

# Додавання реєстрацій
cursor.execute('''
INSERT INTO Registration (id, student_id, administrator_id, price, registration_date)
VALUES (?, ?, ?, ?, ?)
''', (1, 1, 1, 500.0, '2024-01-10'))

cursor.execute('''
INSERT INTO Registration (id, student_id, administrator_id, price, registration_date)
VALUES (?, ?, ?, ?, ?)
''', (2, 2, 2, 750.0, '2024-01-12'))

# Додавання навчальних матеріалів
cursor.execute('''
INSERT INTO Course_materials (id, course_id, lectures, practical_tasks, additional_resources)
VALUES (?, ?, ?, ?, ?)
''', (1, 1, '{"lecture1": "Intro", "lecture2": "Variables"}', '{"task1": "Create a program"}', '{"resource1": "Python docs"}'))

cursor.execute('''
INSERT INTO Course_materials (id, course_id, lectures, practical_tasks, additional_resources)
VALUES (?, ?, ?, ?, ?)
''', (2, 2, '{"lecture1": "Data types", "lecture2": "Functions"}', '{"task1": "Analyze dataset"}', '{"resource1": "Pandas docs"}'))

# Додавання розкладу (для демонстрації, лише ID)
cursor.execute('''
INSERT INTO Schedule (id)
VALUES (?)
''', (1,))

cursor.execute('''
INSERT INTO Schedule (id)
VALUES (?)
''', (2,))



# Збереження змін
conn.commit()

print("Записи додані успішно")

"""# Запити та оновлення даних"""

# Отримати список студентів разом із назвами курсів, на які вони зареєстровані

cursor.execute('''SELECT Student.name AS student_name, Course.course_description AS course_name
FROM Registration
INNER JOIN Student ON Registration.student_id = Student.id
INNER JOIN Course ON Registration.id = Course.id''')

result = cursor.fetchall()

print('Студенти та їх курси: ')
for row in result:
    print(f"{row[0]}: {row[1]}")

query2 = '''
SELECT Lecturer.name AS lecturer_name, Course.course_description AS course_name
FROM Lecturer, Course
WHERE Lecturer.id = Course.id AND Course.hours_number > 100;
'''

cursor.execute(query2)
result2 = cursor.fetchall()
print("Запит 2: Викладачі та курси (тривалість > 100 годин):")
for row in result2:
    print(f'{row[0]}: {row[1]}')

# оновлення даних

cursor.execute('''UPDATE Lecturer
                  SET name = 'Ann Hathaway'
                  WHERE id = 1''')

cursor.execute('''UPDATE Course
                  SET course_description = 'Introduction to LLMs'
                  WHERE course_description = "Introduction to Python Programming"''')

cursor.execute('''UPDATE Student
                  SET name = 'Taras Honcharenko'
                  WHERE university = "Taras Shevchenko University"''')

# Отримати новий список студентів із назвами курсів, на які вони зареєстровані

cursor.execute('''SELECT Student.name AS student_name, Course.course_description AS course_name
FROM Registration
INNER JOIN Student ON Registration.student_id = Student.id
INNER JOIN Course ON Registration.id = Course.id''')

changed_result = cursor.fetchall()

print('Студенти та їх курси: ')
for row in changed_result:
    print(f"{row[0]}: {row[1]}")

query2 = '''
SELECT Lecturer.name AS lecturer_name, Course.course_description AS course_name
FROM Lecturer, Course
WHERE Lecturer.id = Course.id AND Course.hours_number > 100;
'''

cursor.execute(query2)
result2 = cursor.fetchall()
print("Запит 2: Викладачі та курси (тривалість > 100 годин):")
for row in result2:
    print(f'{row[0]}: {row[1]}')